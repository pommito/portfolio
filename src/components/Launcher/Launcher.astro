---
import Shortcut from "../ui/Shortcut.astro";
import LauncherOverlay from "./LauncherOverlay.astro";
import LauncherListCategory from "./LauncherListCategory.astro";

import { categories } from "@/data/launcher";


---

<LauncherOverlay>
  <div 
    role="dialog" 
    aria-hidden="true"
    tabindex="-1"
    class="relative mx-auto w-full top-20 z-999 max-w-xl  text-neutral-500 dark:text-neutral-400 bg-neutral-100 dark:bg-neutral-800 inset-ring inset-ring-neutral-950/8 dark:inset-ring-white/2 rounded-lg"
  >
    <header class="flex items-center justify-between gap-2 text-neutral-800 dark:text-neutral-100 border-b border-neutral-900/5 dark:border-white/5 px-4 py-3">
      <div class="flex items-center gap-2">
        <div class="size-2 bg-neutral-800 dark:bg-neutral-100 rounded-full"/> 
        Launcher
      </div>
      <button id="close-search-button" class="cursor-pointer">
        <Shortcut>esc</Shortcut>
      </button>
    </header>
    <div class="py-2">
      <ul class="px-2">
        {categories.map((category) => <LauncherListCategory label={category.label} entries={category.entries} />)}
      </ul>
    </div>
    <div class="flex items-center gap-1 text-xs mx-auto w-fit pb-4">
      utilise <Shortcut>↓</Shortcut> ou <Shortcut>↑</Shortcut>
    </div>
  </div>
</LauncherOverlay>

<script>
import { toggleModal } from '@/utils/launcher';

document.addEventListener('astro:page-load', () => {
    const LauncherElem = document.getElementById('search-menu');
    const closeSearchButtonElem = document.getElementById('close-search-button');
    const menuItems = document.querySelectorAll('[role="menuitem"]');
    let currentIndex = -1;

    if (LauncherElem && closeSearchButtonElem) {
        const handleKeyDown = (e : KeyboardEvent) => {
            if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
              console.log('pressed');
              
                toggleModal(LauncherElem);
                currentIndex = -1;
            } else if (e.key === 'Escape') {
                toggleModal(LauncherElem);
                currentIndex = -1;
            } else if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
                if (currentIndex === -1 && e.key === 'ArrowDown') {
                    currentIndex = 0;
                } else if (e.key === 'ArrowUp' && currentIndex > 0) {
                    currentIndex--;
                } else if (e.key === 'ArrowDown' && currentIndex < menuItems.length - 1) {
                    currentIndex++;
                }
                (menuItems[currentIndex] as HTMLElement).focus();
            }
        };

        window.addEventListener('keydown', handleKeyDown);
        closeSearchButtonElem.addEventListener('click', () => toggleModal(LauncherElem));

    }
});

</script>
